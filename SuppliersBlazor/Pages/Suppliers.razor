@page "/suppliers"
@page "/"

@attribute [Authorize(Roles = "Administrator, Manager")]

@inject ICrud sql
@inject NavigationManager Navigator

<div class="form-group row">
        <div class="col-md-6">
            <h3>Поставщики</h3>
            @* Вывод всех поставщиков *@

        </div>
        <div class="col-md-6">
    <h3>Добавление нового поставщика</h3>

    <br />
    <ErrorBoundary>
        <ChildContent>
                <button class="btn btn-outline-primary float-end" @onclick="OnClick">Создать поставщика</button>
        </ChildContent>
    </ErrorBoundary>
    <br />

    <br />
    </div>
</div>

            @if (suppliers == null)
            {
                <h4>Загрузка...</h4>
            }
            else
            {

                <div class="form-container table-striped col-md-8">

                    @foreach (var supplier in suppliers)
                    {
                        <div class="form-group row col-md-8">
                            <label class="col-md-8 col-form-label">
                                <a href="supplierentry/@supplier.id">@supplier.id @supplier.supplier @supplier.prefix </a>
                            </label>
                            <AuthorizeView Roles="Administrator">
                                            <Authorized>
                            <div class="col-md-4 float-end">
                                @if (idToDelete == supplier.id)
                                {
                                    <button class="btn btn-danger mx-2" @onclick="(() => DeleteSupplier(supplier.id))">
                                        Подтвердить удаление Delete
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-outline-danger mx-2" @onclick="(() => idToDelete = supplier.id)">
                                        Удалить
                                    </button>
                                }
                            </div>
                                        </Authorized>
                             </AuthorizeView>


                        </div>
                    }
                </div>



            }














@code {

    //private string? errorMessage;

    private async Task OnClick()
    {

        Navigator.NavigateTo($"createsupplier");

    }

    private IList<ISupplier>? suppliers;

    private int idToDelete = 0;

    private async Task DeleteSupplier(int id)
    {
        await sql.RemoveSupplier(id);
        suppliers.Remove(suppliers.Where(x => x.id == id).FirstOrDefault());
        idToDelete = 0;
    }



    protected override async Task OnInitializedAsync()
    {
        suppliers = await sql.GetAllSuppliersAsync();
    }


}
