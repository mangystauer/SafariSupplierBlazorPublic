@page "/suppliers"
@page "/"

@attribute [Authorize(Roles = "Administrator")]

@inject ICrud sql
@inject NavigationManager Navigator


<h3>Добавление нового поставщика</h3>

<br />
<ErrorBoundary>
    <ChildContent>
        <btn class="btn btn-outline-primary" @onclick="OnClick">Создать поставщика</btn>
    </ChildContent>
</ErrorBoundary>
<br />

<br />

<h3>Поставщики</h3>
@* Вывод всех поставщиков *@



@if (suppliers == null)
{
    <h4>Загрузка...</h4>
}
else
{


    <ul>
        @foreach (var supplier in suppliers)
        {
            <li><a href="supplierentry/@supplier.id">@supplier.id @supplier.supplier @supplier.prefix</a></li>
        }
    </ul>
}







@code {

    private int parameter;

    //private string? errorMessage;

    private async Task OnClick()
    {

        var result = await CreateNewSupplier(sql);

        

        parameter = result.id;

        Navigator.NavigateTo($"supplierentry/{parameter}");

    }

    private Supplier model = new();

    private IReadOnlyList<ISupplier>? suppliers;




    private ISupplier supplier = new DisplaySupplierModel
        {
            //string sql = "insert into suppliers (supplier, prefix, partnum_col, avail, cost, markupthreshold, markupbelow, markupabove) values (@id, @supplier, @prefix, @partnum_col, @avail, @cost, @markupthreshold, @markupbelow, @markupabove);";

            supplier = "Новый Поставщик - ИЗМЕНИТЬ",
            prefix = "NP - ИЗМЕНИТЬ",
            partnum_col = 1,
            avail = 2,
            cost = 5,
            markupthreshold = 150000,
            markupbelow = 0.3m,
            markupabove = 0.2m

        };




    protected override async Task OnInitializedAsync()
    {
        suppliers = await sql.GetAllSuppliersAsync();
    }


    private async Task<ISupplier> CreateNewSupplier(ICrud sql)
    {



        return await sql.CreateSupplierAsync(supplier);




    }


}
